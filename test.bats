#!/usr/bin/env bats

setup() {
  sed="sed"
  for f in handle_collisions handle_columns handle_flying handle_keypress ; do
    eval "$(sed -n "/^$f()/,/^}/p" < sfb.sh)"
  done

  base_input=$(cat << "EOF"
[======================================]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[......................................]
[......................................]
[......................................]
[...........0..........................]
[......................................]
[......................................]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[======================================]
Score: 0
EOF
)

  collision_input=$(cat << "EOF"
[======================================]
[............========..................]
[............========..................]
[............========..................]
[............========..................]
[............========..................]
[............========..................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[............========..................]
[............========..................]
[............========..................]
[............========..................]
[............========..................]
[............========..................]
[======================================]
Score: 0
EOF
)

  between_input=$(cat << "EOF"
[======================================]
[==..............................======]
[==..............................======]
[==..............................======]
[==..............................======]
[==..............................======]
[==..............................======]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[==..............................======]
[==..............................======]
[==..............................======]
[==..............................======]
[==..............................======]
[==..............................======]
[======================================]
Score: 0
EOF
)
}

@test "handle_keypress with empty input changes nothing" {
  expected="$base_input"
  after_press="$(printf "\n%s\n" "$base_input" | handle_keypress)"

  [ "$expected" = "$after_press" ]
}

@test "handle_keypress with a letter other than k changes nothing" {
  expected="$base_input"
  after_press="$(printf "n\n%s\n" "$base_input" | handle_keypress)"

  [ "$expected" = "$after_press" ]
}

@test "handle_keypress with the letter k changes the bird from 1 to the digit 5" {
  expected="$(printf "%s\n" "$base_input" | sed 's/\.0/.5/')"
  after_press="$(printf "k\n%s\n" "$(printf "%s\n" "$base_input" | sed 's/\.0/.1/')" | handle_keypress)"

  [ "$expected" = "$after_press" ]
}

@test "handle_keypress with the letter k changes the bird from 0 to the digit 5" {
  expected="$(printf "%s\n" "$base_input" | sed 's/\.0/.5/')"
  after_press="$(printf "k\n%s\n" "$base_input" | handle_keypress)"

  [ "$expected" = "$after_press" ]
}

@test "handle_collisions returns true when falling and in front of last of top bars" {
  input="$(printf "%s\n" "$collision_input" | sed '7 s/\.=/0=/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns true when flying and in front of last of top bars" {
  input="$(printf "%s\n" "$collision_input" | sed '7 s/\.=/1=/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns true when flying and in front of any other top bar" {
  input="$(printf "%s\n" "$collision_input" | sed '5 s/\.=/3=/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns true when falling and in front of any other top bar" {
  input="$(printf "%s\n" "$collision_input" | sed '5 s/\.=/0=/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns true when flying and one line below last of top bars" {
  input="$(printf "%s\n" "$collision_input" | sed '8 s/^.*$/[...........1..........................]/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns false when falling and one line below last of top bars" {
  input="$(printf "%s\n" "$collision_input" | sed '8 s/^.*$/[...........0..........................]/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "1" ]
}

@test "handle_collisions returns false when flying between old and new top bars" {
    input="$(printf "%s\n" "$between_input" | sed '4 s/^.*$/[==.........4....................======]/')"
    after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

    [ "$after_collision_check" = "1" ]
}

@test "handle_collisions returns false when falling between old and new top bars" {
    input="$(printf "%s\n" "$between_input" | sed '4 s/^.*$/[==.........0....................======]/')"
    after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

    [ "$after_collision_check" = "1" ]
}

@test "handle_collisions returns true when falling and one line above first of bottom bars" {
  input="$(printf "%s\n" "$collision_input" | sed '13 s/^.*$/[...........0..........................]/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns false when flying and one line above first of bottom bars" {
  input="$(printf "%s\n" "$collision_input" | sed '13 s/^.*$/[...........5..........................]/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "1" ]
}

@test "handle_collisions returns true when flying and in front of first of bottom bars" {
  input="$(printf "%s\n" "$collision_input" | sed '14 s/\.=/1=/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns true when falling and in front of first of bottom bars" {
  input="$(printf "%s\n" "$collision_input" | sed '14 s/\.=/0=/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns true when flying and one line below last of top bars" {
  input="$(printf "%s\n" "$collision_input" | sed 's/^\[\.\.\.\.\.\.\.\.\.\.\.\.========\./[..........========.../' | sed '8 s/^.*$/[...........1..........................]/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns true when falling and one line above first of bottom bars" {
  input="$(printf "%s\n" "$collision_input" | sed 's/^\[\.\.\.\.\.\.\.\.\.\.\.\.========\./[..........========.../' | sed '13 s/^.*$/[...........0..........................]/')"
  after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

  [ "$after_collision_check" = "0" ]
}

@test "handle_collisions returns false when flying between old and new bottom bars" {
    input="$(printf "%s\n" "$between_input" | sed '16 s/^.*$/[==.........4....................======]/')"
    after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

    [ "$after_collision_check" = "1" ]
}

@test "handle_collisions returns false when falling between old and new bottom bars" {
    input="$(printf "%s\n" "$between_input" | sed '16 s/^.*$/[==.........0....................======]/')"
    after_collision_check="$(printf "%s\n" "$input" | handle_collisions)"

    [ "$after_collision_check" = "1" ]
}

@test "handle_flying moves the bird down when falling" {
    expected="$(printf "%s\n" "$base_input" | sed 's/\.0/../' | sed '12 s/^.*$/[...........0..........................]/')"
    after_flying="$(printf "%s\n" "$base_input" | handle_flying)"

    [ "$expected" = "$after_flying" ]
}

@test "handle_flying moves the bird up when flying" {
    expected="$(printf "%s\n" "$base_input" | sed 's/\.0/../' | sed '10 s/^.*$/[...........5..........................]/')"
    after_flying="$(printf "%s\n" "$base_input" | sed 's/\.0/.5/' | handle_flying)"

    [ "$expected" = "$after_flying" ]
}

@test "handle_flying moves the bird up when falling between old and new top bars" {
    input="$(printf "%s\n" "$between_input" | sed '3 s/^.*$/[==.........0....................======]/')"
    expected="$(printf "%s\n" "$input" | sed 's/\.0/../' | sed '4 s/^.*$/[==.........0....................======]/')"
    after_flying="$(printf "%s\n" "$input" | handle_flying)"

    [ "$expected" = "$after_flying" ]
}

@test "handle_flying moves the bird up when flying between old and new top bars" {
    input="$(printf "%s\n" "$between_input" | sed '3 s/^.*$/[==.........3....................======]/')"
    expected="$(printf "%s\n" "$input" | sed 's/\.3/../' | sed '2 s/^.*$/[==.........3....................======]/')"
    after_flying="$(printf "%s\n" "$input" | handle_flying)"

    [ "$expected" = "$after_flying" ]
}

@test "handle_flying moves the bird up when falling between old and new bottom bars" {
    input="$(printf "%s\n" "$between_input" | sed '16 s/^.*$/[==.........0....................======]/')"
    expected="$(printf "%s\n" "$input" | sed 's/\.0/../' | sed '17 s/^.*$/[==.........0....................======]/')"
    after_flying="$(printf "%s\n" "$input" | handle_flying)"

    [ "$expected" = "$after_flying" ]
}

@test "handle_flying moves the bird up when flying between old and new bottom bars" {
    input="$(printf "%s\n" "$between_input" | sed '16 s/^.*$/[==.........4....................======]/')"
    expected="$(printf "%s\n" "$input" | sed 's/\.4/../' | sed '15 s/^.*$/[==.........4....................======]/')"
    after_flying="$(printf "%s\n" "$input" | handle_flying)"

    [ "$expected" = "$after_flying" ]
}

@test "handle_columns moves the bars to the left and does not update the score" {
    input=$(cat << "EOF"
[======================================]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[......................................]
[......................................]
[......................................]
[......................................]
[...........0..........................]
[......................................]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[======================================]
Score: 0
EOF
)
    expected=$(cat << "EOF"
[======================================]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[......................................]
[......................................]
[......................................]
[......................................]
[...........0..........................]
[......................................]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[======================================]
Score: 0
EOF
)

    after_handle_column="$(printf "%s\n" "$input" | handle_columns)"

    [ "$expected" = "$after_handle_column" ]
}

@test "handle_columns moves the bars to the left and does not update the score and decrements the flying value" {
    input=$(cat << "EOF"
[======================================]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[......................................]
[......................................]
[......................................]
[......................................]
[...........9..........................]
[......................................]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[======================================]
Score: 0
EOF
)
    expected=$(cat << "EOF"
[======================================]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[......................................]
[......................................]
[......................................]
[......................................]
[...........8..........................]
[......................................]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[.............................========.]
[======================================]
Score: 0
EOF
)

    after_handle_column="$(printf "%s\n" "$input" | handle_columns)"

    [ "$expected" = "$after_handle_column" ]
}

@test "handle_columns increments the score when the bars pass the bird" {
    input=$(cat << "EOF"
[======================================]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[...........0..........................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[======================================]
Score: 0
EOF
)
    expected=$(cat << "EOF"
[======================================]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...........0..........................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[======================================]
Score: 1
EOF
)

    after_handle_column="$(printf "%s\n" "$input" | handle_columns)"

    [ "$expected" = "$after_handle_column" ]
}

@test "handle_columns increments the score to double digits when the bars pass the bird" {
    input=$(cat << "EOF"
[======================================]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[...........0..........................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[======================================]
Score: 9
EOF
)
    expected=$(cat << "EOF"
[======================================]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...........0..........................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[======================================]
Score: 10
EOF
)

    after_handle_column="$(printf "%s\n" "$input" | handle_columns)"

    [ "$expected" = "$after_handle_column" ]
}

@test "handle_columns increments the score to double digits with leading 9 when the bars pass the bird" {
    input=$(cat << "EOF"
[======================================]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[...........0..........................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[....========..........................]
[======================================]
Score: 91
EOF
)
    expected=$(cat << "EOF"
[======================================]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...........0..........................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[...========...........................]
[======================================]
Score: 92
EOF
)

    after_handle_column="$(printf "%s\n" "$input" | handle_columns)"

    [ "$expected" = "$after_handle_column" ]
}

@test "handle_columns adds new columns once the bars reach the left, does not change the score and decrements the flying value" {
    input=$(cat << "EOF"
[======================================]
[.========.............................]
[.========.............................]
[.========.............................]
[.========.............................]
[.========.............................]
[.========.............................]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[...........1..........................]
[.========.............................]
[.========.............................]
[.========.............................]
[.========.............................]
[.========.............................]
[.========.............................]
[======================================]
Score: 1
EOF
)
    expected=$(cat << "EOF"
[======================================]
[=======..............................=]
[=======..............................=]
[=======..............................=]
[=======..............................=]
[=======..............................=]
[=======..............................=]
[......................................]
[......................................]
[......................................]
[......................................]
[......................................]
[...........0..........................]
[=======..............................=]
[=======..............................=]
[=======..............................=]
[=======..............................=]
[=======..............................=]
[=======..............................=]
[======================================]
Score: 1
EOF
)

    after_handle_column="$(printf "%s\n" "$input" | handle_columns)"

    [ "$expected" = "$after_handle_column" ]
}

@test "handle_columns removes the left-most columns and complets the new right-most columns and does not change the score" {
    input=$(cat << "EOF"
[======================================]
[=..............................=======]
[=..............................=======]
[=..............................=======]
[=..............................=======]
[=..............................=======]
[=..............................=======]
[......................................]
[......................................]
[......................................]
[......................................]
[...........0..........................]
[......................................]
[=..............................=======]
[=..............................=======]
[=..............................=======]
[=..............................=======]
[=..............................=======]
[=..............................=======]
[======================================]
Score: 1
EOF
)
    expected=$(cat << "EOF"
[======================================]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[......................................]
[......................................]
[......................................]
[......................................]
[...........0..........................]
[......................................]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[..............................========]
[======================================]
Score: 1
EOF
)

    after_handle_column="$(printf "%s\n" "$input" | handle_columns)"

    [ "$expected" = "$after_handle_column" ]
}
